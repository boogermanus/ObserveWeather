@page "/Location"
@using System.Security.Claims
@using LeafletForBlazor
@using Microsoft.AspNetCore.Authorization
@using ObserveWeather.Blazor.Components.Account
@using ObserveWeather.Blazor.Core.ApiModels
@inject HttpClient Client
@inject IHttpContextAccessor Context
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Location</PageTitle>
<AuthorizeView>
    <div class="row">
        <h1>Location</h1>
    </div>

    <div class="container">
        <div class="row">
            <RealTimeMap Parameters="@_parameters" height="50vh" width="80hw" OnClickMap="OnClickMap"
                         @ref="Map"></RealTimeMap>
        </div>
        <div class="row">
            <div class="col-sm-2">Latitude: @_latitude</div>
            <div class="col-sm-2">Longitude: @_longitude</div>
        </div>

        @if (_point == null && _loading)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            if (_dataLoaded)
            {
                <div class="row">
                    <div class="col-md-6">
                        @City, @State - @RadarStation
                        <button class="btn btn-primary" @onclick="() => Add(RadarStation)">Add</button>
                    </div>
                </div>
            }
        }
    </div>
</AuthorizeView>

@code{
    public required RealTimeMap Map;
    private RealTimeMap.Location? _location;
    private Point? _point;
    private const double DefaultLatitude = 33.67;
    private const double DefaultLongitude = -101.82;
    private double _latitude;
    private double _longitude;
    private bool _loading;
    private bool _dataLoaded;
    private string City => _point?.Properties.RelativeLocation.Properties.City ?? string.Empty;
    private string State => _point?.Properties.RelativeLocation.Properties.State ?? string.Empty;
    private string RadarStation => _point?.Properties.RadarStation ?? string.Empty;

    private readonly RealTimeMap.LoadParameters _parameters = new()
    {
        basemap = new RealTimeMap.Basemap
        {
            basemapLayers = new List<RealTimeMap.BasemapLayer>
            {
                new()
                {
                    url = "http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    attribution = "©Open Street Map",
                    title = "Open Street Map",
                    detectRetina = true
                },
                new()
                {
                    url = "https://tile.opentopomap.org/{z}/{x}/{y}.png",
                    attribution = "Open Topo",
                    title = "Open Topo",
                    detectRetina = true
                },
            }
        },
        location = new RealTimeMap.Location
        {
            latitude = DefaultLatitude,
            longitude = DefaultLongitude
        },
        zoomLevel = 5,
    };

    protected override void OnInitialized()
    {
        _latitude = DefaultLatitude;
        _longitude = DefaultLongitude;

        base.OnInitialized();
    }

    public async Task OnClickMap(RealTimeMap.ClicksMapArgs args)
    {
        _point = null;
        _loading = true;
        _dataLoaded = false;
        _location = args.location;
        await Map.movePoint([_location.latitude, _location.longitude]);
        _latitude = Math.Round(_location.latitude, 3);
        _longitude = Math.Round(_location.longitude, 3);
        await GetPoints(_location);
        _loading = false;
        _dataLoaded = true;
    }

    private async Task GetPoints(RealTimeMap.Location location)
    {
        var result = await Client.GetFromJsonAsync<Point>($"points/{location.latitude},{location.longitude}");
        _point = result;
        
    }

    private void Add(string station)
    {
        Console.WriteLine(Context.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier));
        Console.WriteLine(station);
    }

}